#!/bin/env python

# Requires python 3.8 or higher

description = '<timeStamp>run-lumi</timeStamp><addrHeader><address_header clid="1238547719" service_type="71" /></addrHeader><typeName>CondAttrListCollection</typeName>'

# Station, plane pairs for hardware ID running from 0 to 15.
mappingData = {
      429: [(0, 0), (0, 1), (0, 2), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1)],
      586: [(-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (0, 0), (0, 1), (0, 2), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1)],
     1003: [(0, 0), (0, 1), (0, 2), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1)],
     1040: [(-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (0, 0), (0, 1), (0, 2), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1)],
     1099: [(0, 0), (0, 1), (0, 2), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1)],
     1217: [(-1, -1), (-1, -1), (-1, -1), (0, 0), (0, 1), (0, 2), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1)],
     1305: [(-1, -1), (-1, -1), (-1, -1), (2, 0), (2, 1), (2, 2), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1)],
     1320: [(1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1)],
     1342: [(1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2), (3, 0), (3, 1), (3, 2), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1)],
     3284: [(0, 0), (0, 1), (0, 2), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1)],
     3287: [(1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2), (3, 0), (3, 1), (3, 2), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1)],
     3288: [(0, 0), (0, 1), (0, 2), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1)],
     4272: [(1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2), (3, 0), (3, 1), (3, 2), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1)],
     4359: [(0, 0), (0, 1), (0, 2), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1)],
     4399: [(1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2), (3, 0), (3, 1), (3, 2), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1)],
     4404: [(0, 0), (0, 1), (0, 2), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1)],
     4411: [(1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2), (3, 0), (3, 1), (3, 2), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1)],
     4418: [(0, 0), (0, 1), (0, 2), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1)],
     4439: [(1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2), (3, 0), (3, 1), (3, 2), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1)],
     4857: [(0, 0), (0, 1), (0, 2), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1)],
     4865: [(1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2), (3, 0), (3, 1), (3, 2), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1)],
     4875: [(0, 0), (0, 1), (0, 2), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1)],
     4892: [(1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2), (3, 0), (3, 1), (3, 2), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1)],
     4900: [(-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (0, 0), (0, 1), (0, 2), (-1, -1), (-1, -1)],
     4912: [(1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2), (3, 0), (3, 1), (3, 2), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1)],
     4954: [(-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (0, 0), (0, 1), (0, 2), (-1, -1), (-1, -1)],
     4989: [(1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2), (3, 0), (3, 1), (3, 2), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1)],
     4991: [(-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (0, 0), (0, 1), (0, 2), (-1, -1), (-1, -1)],
     4993: [(1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2), (3, 0), (3, 1), (3, 2), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1)],
     4996: [(-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (0, 0), (0, 1), (0, 2), (-1, -1), (-1, -1)],
     4997: [(1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2), (3, 0), (3, 1), (3, 2), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1)],
     5042: [(-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (0, 0), (0, 1), (0, 2), (-1, -1), (-1, -1)],
     5050: [(1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2), (3, 0), (3, 1), (3, 2), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (-1, -1)],
    }

maxInt32 = 0xFFFFFFFF

# Look for data entry errors

print('Validating data')

lastRun = 0
for run, data in mappingData.items():
    assert isinstance(run, int), 'Run number is not integer'
    assert run > lastRun, 'Run numbers out of order'
    assert run <= maxInt32, 'Run number out of range'
    lastRun = run
    assert len(data) == 16, 'Run does not have 16 TRB entries'
    for i in range(16):
        assert len(data[i]) == 2, 'TRB entry does not have two values'
        assert isinstance(data[i][0], int), 'Station number is not integer'
        assert isinstance(data[i][1], int), 'Plane number is not integer'
        assert data[i][0] >= -1 and data[i][0] <= 3, 'Invalid station number'
        assert data[i][1] >= -1 and data[i][1] <= 3, 'Invalid plane number'

# Data looks OK

from PyCool import cool

dbSvc = cool.DatabaseSvcFactory.databaseService()
connectString = 'sqlite://;schema=CABP200.db;dbname=OFLP200'

print('Recreating database')

dbSvc.dropDatabase( connectString )
db = dbSvc.createDatabase( connectString )

cableSpec = cool.RecordSpecification()
cableSpec.extend( 'station', cool.StorageType.Int32 )
cableSpec.extend( 'plane'  , cool.StorageType.Int32 )

cableFolderSpec = cool.FolderSpecification(cool.FolderVersioning.SINGLE_VERSION, cableSpec)
cableFolder = db.createFolder('/SCT/DAQ/CableMapping', cableFolderSpec, description, True)

# There should be one record entered per TRB per IOV
lastValid = cool.ValidityKeyMax
for firstValidRun, mapping in reversed(mappingData.items()):
    firstValid = (firstValidRun << 32)
    for hardwareID in range(16):
        cableRecord = cool.Record(cableSpec)
        cableRecord[ 'station' ] = mapping[hardwareID][0]
        cableRecord[ 'plane' ] = mapping[hardwareID][1]
        cableFolder.storeObject( firstValid, lastValid, cableRecord, int(hardwareID) )
    lastValid = ((firstValidRun - 1) << 32) | (cool.ValidityKeyMax & 0x00000000FFFFFFFF)

db.closeDatabase()

print('Database completed')